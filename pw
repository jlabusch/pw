#!/usr/bin/env node

function parse_args(argv){
    const args = {
        help: false,
        list: false,
        keys: []
    };

    let opt_end = false,
        last_opt = 0;

    argv.forEach((arg, i) => {
        if (opt_end){
            return;
        }

        switch(arg){
            case '-l':
            case '--list':
            case 'list':
                args.list = true;
                last_opt = i+1;
                break;
            case '-h':
            case '--help':
            case 'help':
                args.help = true;
                last_opt = i+1;
                break;
            default:
                opt_end = true;
                last_opt = i;
        }
    });

    args.keys = argv.slice(last_opt);

    return args;
}

function print_help(){
    console.log(`NAME
    pw - copy a password from Bitwarden into your clipboard

SYNOPSIS
    pw list [key]       Show the list of items available, or only items matching [key].
    pw <key>            Passwords are copied into your clipboard, notes are displayed on stdout.

    Key can be an exact-match item ID or name, or a case-insensitive substring of a name.
`);
}

function to_type(n){
    switch(n){
        case 1: return 'password';
        case 2: return 'notes';
        default: return 'unknown';
    }
}

function exec_handler(fn){
    return function(err, stdout, stderr){
        if (err){
            console.error(stderr);
            console.error(err);
            process.exit(2);
        }

        if (fn){
            fn(stdout);
        }else if (stdout){
            console.log(stdout);
        }
    }
}

function print_item(x){
    let t = to_type(x.type),
        name = `${x.id}\t\x1b[36m${x.name}\x1b[0m`,
        coll = x.collections.length ? `\x1b[33m[${x.collections.join(', ')}]\x1b[0m` : '';

    if (t === 'password'){
        console.log(`${name} (${x.login && x.login.username ? x.login.username : 'password'}) ${coll} `);
    }else{
        console.log(`${name} (${t}) ${coll}`);
    }
}

function resolve_item(item){
    if (item.type === 1){
        let clippy = 'clip.exe';

        if (os.platform() === 'linux'){
            if (!os.release().toLowerCase().includes('microsoft')){ // WSL check
                clippy = 'xclip -selection c';
            }
        }else if (os.platform() === 'darwin'){
            clippy = 'pbcopy';
        }

        exec(`bw get password ${item.id} | ${clippy}`, exec_handler());

        if (item.notes){
            exec(`bw get notes ${item.id}`, exec_handler());
        }
    }else{
        exec(`bw get ${to_type(item.type)} ${item.id}`, exec_handler());
    }
}

function process_key(k, list){
    let arr = list.filter(x => x.name === k || x.id === k);

    if (arr.length > 1){
        console.error(`Multiple matches for key "${k}"`);
        process.exit(4);
    }else if (arr.length === 1){
        resolve_item(arr[0]);
    }else{
        arr = list.filter(x => loose_match(x, 'name', k));

        if (arr.length > 1){
            console.error(`No exact matches and multiple fuzzy matches for "${k}"`);
            process.exit(5);
        }else if (arr.length === 1){
            resolve_item(arr[0]);
        }else{
            console.error(`No matches for "${k}"`);
        }
    }
}

function loose_match(obj, key, value){
    return obj[key].toLowerCase().match(value.toLowerCase());
}

function safe_json(input){
    let json = null;

    try{
        json = JSON.parse(input);
    }catch(ex){
        console.error(ex);
        process.exit(3);
    }

    return json;
}

const { exec } = require('node:child_process');
const { argv } = require('node:process');
const os = require('node:os');

let args = parse_args(argv.slice(2));

if (args.help || (!args.list && args.keys.length < 1)){
    print_help();
    process.exit(0);
}

exec('bw list items', exec_handler(stdout => {
    let list = safe_json(stdout);

    if (args.list){
        exec('bw list collections', exec_handler(stdout => {
            let collections = {};

            safe_json(stdout).forEach(c => {
                collections[c.id] = c.name;
            });

            list.filter(x => args.keys.length ? loose_match(x, 'name', args.keys[0]) : true)
                .forEach(x => {
                    x.collections = x.collectionIds.map(c => collections[c]);
                    print_item(x);
                });
        }));
    }else if (args.keys.length){
        process_key(args.keys[0], list);
    }
}));
